#include <TFile.h>
#include <TTree.h>
#include <TH1F.h>
#include <TH2F.h>
#include <TCanvas.h>
#include <iostream>
#include <stdlib.h>
#include <TMath.h>

using namespace std;


#define PI 3.1415926
enum SIMPLEPID {PHOTON, ELECTRON, PION, MUON, KAON, PROTON};

void analysis(int isBelle=1, int maxevt=0,int mult=50,int nbin=40,bool verbose=0){

  TString filename;
  if(isBelle) filename="output_2_withtheta.root"; 			
  //else filename="../LEP2dataMarcello/myALEPH.root";
  else filename="../LEP2dataMarcello/ROOTfiles/final_ALEPH.root";
  
  TFile *f = new TFile(filename.Data());
  TTree *t1 = (TTree*)f->Get("t");
  Int_t nParticle;
  Float_t pt[50000];
  Float_t eta[50000];
  Float_t theta[50000];
  Float_t pid[50000];
  Float_t phi[50000];
  Float_t mass[50000];
  Float_t pwflag[50000];
  
  t1->SetBranchAddress("nParticle",&nParticle);
  t1->SetBranchAddress("pt",pt);
  t1->SetBranchAddress("eta",eta);
  t1->SetBranchAddress("theta",theta);
  t1->SetBranchAddress("pid",pid);
  t1->SetBranchAddress("phi",phi);
  t1->SetBranchAddress("mass",mass);
  t1->SetBranchAddress("pwflag",pwflag);
  
  TCanvas *c1 = new TCanvas("eta_phi", "eta_phi", 600,  600);
  TCanvas *c2 = new TCanvas("phi", "phi", 600,  600);
  
  
  
  Int_t nevent = (Int_t)t1->GetEntries();
  int nevent_process = nevent;
  
  if (maxevt > 0 && maxevt < nevent) nevent_process = maxevt;
  
  int count_h = 0;
  int count_l = 0;
  
    for (Int_t i = 0; i<nevent; i++)
    {
      if (count_h >2 && count_l>2) break;
      
      
      
      
      if (i%10000 == 0) cout<<i<<"/"<<nevent_process<<endl;
      t1->GetEntry(i);
      int nparticles = nParticle;
      
      
      
      
      char *h_2D_name = new char[100];
      char *proj_h_1D_name = new char[100];
      if(count_h<2)
      {
        if (nparticles > 50)
        {
          sprintf(h_2D_name, "h_2D_name_%d", i);
          TH2F *h_2D = new TH2F (h_2D_name, "eta_phi of one event", 50, -2.5, 2.5, 50, -PI, PI);
          h_2D->GetXaxis()->SetTitle("eta");
          h_2D->GetYaxis()->SetTitle("phi");
          
          TH2F *h_2D_h = new TH2F ("charged", "eta_phi of one event", 50, -2.5, 2.5, 50, -PI, PI);
          
          sprintf(proj_h_1D_name, "proj_h_1D_name_%d", i);
          TH1F *proj_h_1D = new TH1F (proj_h_1D_name, "phi of one event", 50, -PI, PI);

          for (int j = 0; j< nparticles; j++)
            {
                if (pid[j]==PION || pid[j]==KAON || pid[j]==PROTON)
                {
                  // RED IS HADRON
                  h_2D->SetMarkerColor(2);
                  h_2D->Fill(eta[j], phi[j]);
                  proj_h_1D->Fill(phi[j]);
                }
                if (pid[j] == PHOTON || pid[j] == ELECTRON)
                {
                  // BLUE IS PHOTON/ELECTRON
                  h_2D_h->SetMarkerColor(4);
                  h_2D_h->SetMarkerSize(5);
                  h_2D_h->Fill(eta[j], phi[j]);
                }
                
            }
          
          count_h++;
          
          c1->cd();
          char *h = new char[100];
          sprintf(h, "h_%d.pdf", i);
          h_2D->Draw(); //"colz"
          h_2D_h->Draw("same");
          c1->SaveAs(h);
          
          c2->cd();
          char *proj_h = new char[100];
          sprintf(proj_h, "proj_h_%d.pdf", i);
          proj_h_1D->Draw();
          c2->SaveAs(proj_h);
        }
      }
      
      
      char *l_2D_name = new char[100];
      char *proj_l_1D_name = new char[100];
      if (count_l < 2)
      {
        if (nparticles < 20)
        {
          sprintf(l_2D_name, "l_2D_name_%d", i);
          TH2F *l_2D = new TH2F (l_2D_name, "eta_phi of one event", 50, -2.5, 2.5, 50, -PI, PI);
          l_2D->GetXaxis()->SetTitle("eta");
          l_2D->GetYaxis()->SetTitle("phi");
          TH2F *l_2D_1 = new TH2F ("charged", "eta_phi of one event", 50, -2.5, 2.5, 50, -PI, PI);
          
          sprintf(proj_l_1D_name, "proj_l_1D_name_%d", i);
          TH1F *proj_l_1D = new TH1F (proj_l_1D_name, "phi of one event", 50, -PI, PI);
          
          for (int j = 0; j< nparticles; j++)
            {
                if (pid[j]==PION || pid[j]==KAON || pid[j]==PROTON)
                {
                    // Red is Hadron
                    l_2D->SetMarkerColor(2);
                    l_2D->Fill(eta[j], phi[j]);
                    proj_l_1D->Fill(phi[j]);
                }
                if (pid[j] == PHOTON || pid[j] == ELECTRON)
                {
                  // Blue is electron/photon
                  l_2D_1->SetMarkerColor(4);
                  l_2D_1->Fill(eta[j], phi[j]);
                }
            }
          
          count_l++;
          
          c1->cd();
          char *l = new char[100];
          sprintf(l, "l_%d.pdf", i);
          l_2D->Draw(); //"colz"
          l_2D_1->Draw("same");
          c1->SaveAs(l);
          
          c2->cd();
          char *proj_l = new char[100];
          sprintf(proj_l, "proj_l_%d.pdf", i);
          proj_l_1D->Draw();
          c2->SaveAs(proj_l);
        }
      }
      
      
      
    }
}
